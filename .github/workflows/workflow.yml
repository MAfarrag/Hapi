name: CI
on: [push]
jobs:
  run:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest] #, macos-latest, windows-latest
        python-version: ["3.7", "3.8", "3.9"]
    env:
      OS: ${{ matrix.os }}
#      PYTHON: 3.9

    steps:
    - uses: actions/checkout@master
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@master
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        sudo apt-add-repository ppa:ubuntugis/ubuntugis-unstable
        sudo apt-get update
        sudo apt-get install libproj-dev proj-data proj-bin
        sudo apt-get install libgeos-dev
        sudo apt-get install gdal-bin libgdal-dev libgdal-doc libgdal1h
        sudo apt-get install -y python3.9-dev
        sudo apt-get -y install python3.9-distutils python3-apt python3-pip python3-wheel
        pip install wheel
        pip install --no-cache-dir Cython
        pip install flake8 pytest
        sudo apt-add-repository ppa:ubuntugis/ubuntugis-unstable
        sudo apt-get update
        sudo apt-get install python-gdal
#        export CPLUS_INCLUDE_PATH=/usr/include/gdal
#        export C_INCLUDE_PATH=/usr/include/gdal
#        pip install GDAL==$(gdal-config --version) --global-option=build_ext --global-option="-I/usr/include/gdal"
        if [ -f requirement-ci.txt ]; then pip install -r requirement-ci.txt; fi
        export LD_PRELOAD=/usr/lib/aarch64-linux-gnu/libgomp.so.1:/$LD_PRELOAD
# --include-dirs=/usr/include/gdal
#    - name: Lint with flake8
#      run: |
#        # stop the build if there are Python syntax errors or undefined names
#        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
#        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
#        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Generate coverage report
      run: |
        pip install pytest
        pip install pytest-cov
        pytest --cov=./ --cov-report=xml
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage1.xml,./coverage2.xml
        directory: ./coverage/reports/
        flags: unittests
        env_vars: OS,PYTHON
        name: codecov-umbrella
        fail_ci_if_error: true
        path_to_write_report: ./coverage/codecov_report.txt
        verbose: true
